// Generated by Dagger (https://google.github.io/dagger).
package com.example.androidbox.dagger;

import android.content.Context;
import android.content.SharedPreferences;
import com.example.androidbox.main.MainActivity;
import com.example.androidbox.main.MainActivity_MembersInjector;
import com.google.android.exoplayer2.SimpleExoPlayer;
import com.google.android.exoplayer2.upstream.DataSource;
import dagger.internal.Preconditions;

public final class DaggerPlayerComponent implements PlayerComponent {
  private PlayerModule playerModule;

  private Context context;

  private AndroidModule androidModule;

  private DaggerPlayerComponent(Builder builder) {
    initialize(builder);
  }

  public static PlayerComponent.Builder builder() {
    return new Builder();
  }

  private ContextClass getContextClass() {
    return new ContextClass(context);
  }

  private SimpleExoPlayer getSimpleExoPlayer() {
    return PlayerModule_GetSimpleExoPlayerFactory.proxyGetSimpleExoPlayer(
        playerModule,
        getContextClass(),
        PlayerModule_GetDefaultTrackSelectorFactory.proxyGetDefaultTrackSelector(playerModule));
  }

  private DataSource.Factory getFactory() {
    return PlayerModule_GetDataSourceFactoryFactory.proxyGetDataSourceFactory(
        playerModule, getContextClass());
  }

  private SharedPreferences getSharedPreferences() {
    return AndroidModule_GetSharedPreferencesFactory.proxyGetSharedPreferences(
        androidModule, getContextClass());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.playerModule = builder.playerModule;
    this.context = builder.context;
    this.androidModule = builder.androidModule;
  }

  @Override
  public void getPlayer(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectSimpleExoPlayer(instance, getSimpleExoPlayer());
    MainActivity_MembersInjector.injectTrackSelector(
        instance,
        PlayerModule_GetDefaultTrackSelectorFactory.proxyGetDefaultTrackSelector(playerModule));
    MainActivity_MembersInjector.injectDaFactory(instance, getFactory());
    MainActivity_MembersInjector.injectSharedPreferences(instance, getSharedPreferences());
    return instance;
  }

  private static final class Builder implements PlayerComponent.Builder {
    private PlayerModule playerModule;

    private AndroidModule androidModule;

    private Context context;

    @Override
    public PlayerComponent build() {
      if (playerModule == null) {
        this.playerModule = new PlayerModule();
      }
      if (androidModule == null) {
        this.androidModule = new AndroidModule();
      }
      if (context == null) {
        throw new IllegalStateException(Context.class.getCanonicalName() + " must be set");
      }
      return new DaggerPlayerComponent(this);
    }

    @Override
    public Builder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }
  }
}
