// Generated by Dagger (https://google.github.io/dagger).
package com.example.androidbox.dagger;

import com.google.android.exoplayer2.upstream.DataSource;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PlayerModule_GetDataSourceFactoryFactory implements Factory<DataSource.Factory> {
  private final PlayerModule module;

  private final Provider<ContextClass> contextClassProvider;

  public PlayerModule_GetDataSourceFactoryFactory(
      PlayerModule module, Provider<ContextClass> contextClassProvider) {
    this.module = module;
    this.contextClassProvider = contextClassProvider;
  }

  @Override
  public DataSource.Factory get() {
    return provideInstance(module, contextClassProvider);
  }

  public static DataSource.Factory provideInstance(
      PlayerModule module, Provider<ContextClass> contextClassProvider) {
    return proxyGetDataSourceFactory(module, contextClassProvider.get());
  }

  public static PlayerModule_GetDataSourceFactoryFactory create(
      PlayerModule module, Provider<ContextClass> contextClassProvider) {
    return new PlayerModule_GetDataSourceFactoryFactory(module, contextClassProvider);
  }

  public static DataSource.Factory proxyGetDataSourceFactory(
      PlayerModule instance, ContextClass contextClass) {
    return Preconditions.checkNotNull(
        instance.getDataSourceFactory(contextClass),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
